# Compose file for Ventros CRM
# Compatible with: Docker Compose, Podman Compose, and other OCI-compliant tools
# Usage:
#   docker compose up -d   (Docker)
#   podman-compose up -d   (Podman)
#   nerdctl compose up -d  (containerd)

services:
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: ${POSTGRES_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT_HOST}:${POSTGRES_PORT_CONTAINER}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ventros"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  rabbitmq:
    image: ${RABBITMQ_IMAGE}
    container_name: ${RABBITMQ_CONTAINER_NAME}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT_HOST}:${RABBITMQ_PORT_CONTAINER}"
      - "${RABBITMQ_MANAGEMENT_PORT_HOST}:${RABBITMQ_MANAGEMENT_PORT_CONTAINER}"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}
    ports:
      - "${REDIS_PORT_HOST}:${REDIS_PORT_CONTAINER}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  temporal:
    image: ${TEMPORAL_IMAGE}
    container_name: ${TEMPORAL_CONTAINER_NAME}
    environment:
      - DB=${DB}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${POSTGRES_SEEDS}
    ports:
      - "${TEMPORAL_PORT_HOST}:${TEMPORAL_PORT_CONTAINER}"
    volumes:
      - temporal_data:/etc/temporal
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  temporal-ui:
    image: ${TEMPORAL_UI_IMAGE}
    container_name: ${TEMPORAL_UI_CONTAINER_NAME}
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS}
      - TEMPORAL_CORS_ORIGINS=${TEMPORAL_CORS_ORIGINS}
    ports:
      - "${TEMPORAL_UI_PORT_HOST}:${TEMPORAL_UI_PORT_CONTAINER}"
    depends_on:
      - temporal
    networks:
      - ventros-network

  api:
    build:
      context: ../..
      dockerfile: .deploy/container/Containerfile
    container_name: ${API_CONTAINER_NAME}
    environment:
      PORT: ${PORT}
      ENV: ${ENV}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      TEMPORAL_HOST: temporal:7233
      TEMPORAL_NAMESPACE: ${TEMPORAL_NAMESPACE}
      LOG_LEVEL: ${LOG_LEVEL}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_NAME: ${ADMIN_NAME}
    ports:
      - "${API_PORT_HOST}:${API_PORT_CONTAINER}"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - ventros-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  temporal_data:
    driver: local

networks:
  ventros-network:
    driver: bridge
