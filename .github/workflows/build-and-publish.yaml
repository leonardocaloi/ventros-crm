name: Build & Publish

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.25.1'
  DOCKER_IMAGE: leonardocaloi/ventros-crm
  HELM_CHART_NAME: ventros-crm

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run unit tests
        run: make test-unit

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
        continue-on-error: true

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-unit
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-full: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .deploy/container/Containerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name != 'pull_request'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ventros_crm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run integration tests
        run: make test-integration
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ventros_crm_test?sslmode=disable
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          REDIS_URL: redis://localhost:6379

  publish-helm:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [build-image, test-integration]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    outputs:
      chart-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-${GITHUB_SHA::7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update Chart.yaml
        run: |
          if [ -f .deploy/helm/ventros-crm/Chart.yaml ]; then
            sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" .deploy/helm/ventros-crm/Chart.yaml
            sed -i "s/^appVersion:.*/appVersion: ${{ steps.version.outputs.version }}/" .deploy/helm/ventros-crm/Chart.yaml
          fi

      - name: Package Helm chart
        run: |
          mkdir -p .deploy/helm/packages/
          if [ -f .deploy/helm/ventros-crm/Chart.yaml ]; then
            helm package .deploy/helm/ventros-crm --destination .deploy/helm/packages/
          else
            echo "Helm chart not found, skipping packaging"
          fi

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Update Helm repository
        run: |
          if [ -d gh-pages ]; then
            mkdir -p gh-pages/charts/
            cp .deploy/helm/packages/*.tgz gh-pages/charts/ 2>/dev/null || true
            helm repo index gh-pages/charts --url https://leonardocaloi.github.io/ventros-crm/charts/
          fi

      - name: Publish to GitHub Pages
        if: success()
        run: |
          if [ -d gh-pages ]; then
            cd gh-pages
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add charts/
            git diff --quiet && git diff --staged --quiet || git commit -m "Publish Helm chart ${{ steps.version.outputs.version }}"
            git push
          fi

  trigger-deployment:
    name: Trigger AWX Deployment
    runs-on: ubuntu-latest
    needs: [build-image, publish-helm]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger AWX Staging Deployment
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.AWX_URL }}" ] && [ -n "${{ secrets.AWX_TOKEN }}" ]; then
            curl -X POST "${{ secrets.AWX_URL }}/api/v2/job_templates/${{ secrets.AWX_JOB_TEMPLATE_ID }}/launch/" \
              -H "Authorization: Bearer ${{ secrets.AWX_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "extra_vars": {
                  "image_tag": "${{ needs.build-image.outputs.image-tag }}",
                  "chart_version": "${{ needs.publish-helm.outputs.chart-version }}",
                  "deploy_environment": "staging",
                  "git_commit": "${{ github.sha }}",
                  "build_number": "${{ github.run_number }}",
                  "deployed_by": "github-actions"
                }
              }'
          else
            echo "AWX credentials not configured, skipping deployment trigger"
          fi

      - name: Notify Slack
        if: always() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "Build Completed: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Ventros CRM Build*\n*Branch:* ${{ github.ref_name }}\n*Status:* ${{ job.status }}\n*Version:* ${{ needs.build-image.outputs.image-tag }}\n*Commit:* ${{ github.sha }}"
                  }
                }
              ]
            }
