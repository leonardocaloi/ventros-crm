# Compose file for Ventros CRM - API Local Development
# Sobe infraestrutura + API Go rodando no host (não containerizada)
# 
# A API roda diretamente no host para:
#   - Hot reload com air/nodemon
#   - Debug fácil com delve
#   - Desenvolvimento rápido
#
# Usage:
#   make dev                                                    (recomendado)
#   docker compose -f deployments/compose.api.yaml up -d        (manual)

services:
  # ============================================
  # INFRAESTRUTURA (mesma do compose.infra.yaml)
  # ============================================
  
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: ventros-postgres
    environment:
      POSTGRES_USER: ventros
      POSTGRES_PASSWORD: ventros123
      POSTGRES_DB: ventros_crm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ventros"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  rabbitmq:
    image: docker.io/library/rabbitmq:3.13-management-alpine
    container_name: ventros-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  redis:
    image: docker.io/library/redis:7-alpine
    container_name: ventros-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  temporal:
    image: docker.io/temporalio/auto-setup:1.24.2
    container_name: ventros-temporal
    environment:
      - DB=postgres12_pgx
      - DB_PORT=5432
      - POSTGRES_USER=ventros
      - POSTGRES_PWD=ventros123
      - POSTGRES_SEEDS=postgres
    ports:
      - "7233:7233"
    volumes:
      - temporal_data:/etc/temporal
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventros-network

  temporal-ui:
    image: docker.io/temporalio/ui:2.26.2
    container_name: ventros-temporal-ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8088:8080"
    depends_on:
      - temporal
    networks:
      - ventros-network

  # ============================================
  # API (rodando no HOST via Makefile)
  # ============================================
  # A API NÃO é containerizada aqui!
  # Use: make api (em outro terminal)
  # 
  # Isso permite:
  #   - Hot reload instantâneo
  #   - Debug com breakpoints
  #   - Logs diretos no terminal
  #
  # A API conecta na infra via localhost:
  #   - PostgreSQL: localhost:5432
  #   - RabbitMQ:   localhost:5672
  #   - Redis:      localhost:6379
  #   - Temporal:   localhost:7233

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  temporal_data:
    driver: local

networks:
  ventros-network:
    driver: bridge
