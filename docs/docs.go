// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@ventros.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/agents": {
            "get": {
                "description": "Lista todos os agentes com filtros opcionais",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by tenant ID",
                        "name": "tenant_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by department",
                        "name": "department",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Cria um novo agente",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create agent",
                "parameters": [
                    {
                        "description": "Agent data",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Agent created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/agents/{id}": {
            "get": {
                "description": "Obtém detalhes de um agente específico",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Atualiza um agente existente",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Update agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Agent update data",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove um agente (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Agent deleted successfully"
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/agents/{id}/stats": {
            "get": {
                "description": "Obtém estatísticas de um agente",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get agent statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/api-key": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gera uma nova API key para o usuário",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate API key",
                "parameters": [
                    {
                        "description": "API key request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.GenerateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/info": {
            "get": {
                "description": "Informações sobre autenticação para desenvolvimento",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get auth info",
                "responses": {
                    "200": {
                        "description": "Auth information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Autentica um usuário e retorna API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Obtém o perfil do usuário autenticado",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Cria um novo usuário no sistema com projeto e pipeline default",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/automation/actions": {
            "get": {
                "description": "Retorna todas as ações que podem ser executadas nas automações",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Lista ações disponíveis",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filtrar por categoria (messaging, pipeline, assignment, tasks, integration, organization, data, workflow)",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.ActionResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/conditions/operators": {
            "get": {
                "description": "Retorna todos os operadores disponíveis para condições (eq, gt, lt, contains, etc)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Lista operadores de condição",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.ConditionOperatorResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/discovery": {
            "get": {
                "description": "Retorna tipos, triggers, ações, operadores e lógica em uma única resposta",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Discovery completo de automação",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.AutomationDiscoveryResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/automation/logic-operators": {
            "get": {
                "description": "Retorna operadores lógicos disponíveis para combinar condições",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Lista operadores lógicos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.LogicOperatorResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/triggers": {
            "get": {
                "description": "Retorna todos os triggers do sistema e customizados",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Lista triggers disponíveis",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filtrar por categoria (session, message, pipeline, temporal, transaction, behavior)",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "custom_triggers": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse"
                                    }
                                },
                                "system_triggers": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/triggers/custom": {
            "post": {
                "description": "Permite que admins registrem triggers customizados com prefixo 'custom.'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Registrar trigger customizado",
                "parameters": [
                    {
                        "description": "Metadados do trigger",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "parameters": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "description": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "trigger": {
                                    "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/triggers/custom/{code}": {
            "delete": {
                "description": "Remove trigger customizado previamente registrado",
                "tags": [
                    "Automation"
                ],
                "summary": "Remover trigger customizado",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Código do trigger customizado",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/triggers/{code}": {
            "get": {
                "description": "Retorna metadados completos de um trigger incluindo parâmetros disponíveis",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Detalhes de um trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Código do trigger",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/automation/types": {
            "get": {
                "description": "Retorna todos os tipos de automação disponíveis (follow-up, event, scheduled, etc)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Automation"
                ],
                "summary": "Lista tipos de automação",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.AutomationTypeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/channels": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all channels for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "List channels",
                "responses": {
                    "200": {
                        "description": "Channels list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new communication channel (WAHA, WhatsApp, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Create channel",
                "parameters": [
                    {
                        "description": "Channel data",
                        "name": "channel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Channel created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{channel_id}/sessions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lista todas as sessões. Quando usado no endpoint global /sessions, requer contact_id ou channel_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "List sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact ID (UUID) - required for global endpoint",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by channel ID (UUID) - required for global endpoint",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (active, ended)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of a specific channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Channel details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a communication channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Delete channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Channel deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/activate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Activate a communication channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Activate channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Channel activated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/activate-waha": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Activate and initialize a WAHA session for a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Activate WAHA channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "WAHA channel activated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or not WAHA channel",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/configure-webhook": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Automatically configure webhook in external channel (e.g. WAHA)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Configure channel webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Webhook configuration (optional, uses default if not provided)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.ConfigureWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook configured",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Configuration failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/deactivate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivate a communication channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Deactivate channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Channel deactivated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/import-history": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Import message history from a WAHA channel (chats and messages)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Import WAHA message history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Import configuration (optional)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.ImportWAHAHistoryRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Import started (async)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or not WAHA channel",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/sessions/{session_id}": {
            "get": {
                "description": "Obtém detalhes de uma sessão específica",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/webhook-info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return detailed information about channel webhook",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get channel webhook info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/channels/{id}/webhook-url": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return the webhook URL to be configured in external channel (WAHA, WhatsApp, etc)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get channel webhook URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List chats with optional filters (project_id, contact_id, status, chat_type)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "List chats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by contact ID (participant)",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (active, archived, closed)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by chat type (individual, group, channel)",
                        "name": "chat_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of chats",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new chat (individual, group, or channel)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Create a new chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Chat data",
                        "name": "chat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateChatRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Chat created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get detailed information about a specific chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Get chat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid chat ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/archive": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Archive a chat (can be unarchived later)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Archive chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat archived successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid chat ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/close": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently close a chat (cannot be reopened)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Close chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat closed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid chat ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/participants": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a contact or agent as a participant to a chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Add participant to chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Participant data",
                        "name": "participant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.AddParticipantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/participants/{participant_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a participant from a chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Remove participant from chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "participant_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant removed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat or participant not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/subject": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the subject/name of a group or channel chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Update chat subject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New subject",
                        "name": "subject",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateSubjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subject updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/chats/{id}/unarchive": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unarchive a chat (reactivate it)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Unarchive chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat unarchived successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid chat ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts": {
            "get": {
                "description": "List all contacts with optional filters (authenticated user only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "List contacts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Project not owned by user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new contact in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Create a new contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateContactRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Contact created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/advanced": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List contacts with advanced filters (name, phone, email, tags, dates), pagination, and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "List contacts with advanced filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by name (partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone (partial match)",
                        "name": "phone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email (partial match)",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by tags (comma-separated)",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created_after (YYYY-MM-DD)",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created_before (YYYY-MM-DD)",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort by field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts with pagination",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Full-text search on contact name, phone, and email with relevance scoring",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Search contacts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Result limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results with match scores",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/domain-events": {
            "get": {
                "description": "Lista todos os eventos de domínio disparados para um contato",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain-events"
                ],
                "summary": "List domain events by contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/events": {
            "get": {
                "description": "List contact events with filtering and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact-events"
                ],
                "summary": "List contact events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by categories (comma-separated)",
                        "name": "categories",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 50, max: 200)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/events/stream": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stream contact events in real-time using Server-Sent Events (SSE). Requires authentication.",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "contact-events"
                ],
                "summary": "Stream contact events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by categories (comma-separated): status,pipeline,assignment,tag,note,session,custom_field,system,notification",
                        "name": "categories",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority: low,normal,high,urgent",
                        "name": "priority",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - no access to this contact",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/events/stream/{category}": {
            "get": {
                "description": "Stream contact events filtered by specific category",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "contact-events"
                ],
                "summary": "Stream contact events by category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category: status,pipeline,assignment,tag,note,session,custom_field,system,notification",
                        "name": "category",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event stream",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/sessions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lista todas as sessões. Quando usado no endpoint global /sessions, requer contact_id ou channel_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "List sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact ID (UUID) - required for global endpoint",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by channel ID (UUID) - required for global endpoint",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (active, ended)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{contact_id}/trackings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna todos os trackings de um contato específico",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Busca trackings de um contato",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do contato",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.TrackingDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{id}": {
            "get": {
                "description": "Get detailed information about a specific contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Get contact by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid contact ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Atualiza um contato existente",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Update contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Contact update data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateContactRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove um contato (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Delete contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Contact deleted successfully"
                    },
                    "400": {
                        "description": "Invalid contact ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{id}/pipelines/{pipeline_id}/status": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change contact status in a specific pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Change contact pipeline status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pipeline ID (UUID)",
                        "name": "pipeline_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status change request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.ChangePipelineStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Contact or pipeline not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/contacts/{id}/sessions/{session_id}": {
            "get": {
                "description": "Obtém detalhes de uma sessão específica",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/agents/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all agents (AI agents and human support staff) with comprehensive filtering capabilities. Agents handle customer conversations either autonomously (AI) or manually (human). Essential for team management, capacity planning, and performance monitoring.\n\n**Filtering Capabilities:**\n- Filter by project_id to view agents assigned to specific business units\n- Filter by type to distinguish AI agents from human agents\n- Filter by status (online, offline, busy) for real-time availability tracking\n- Filter by active status to show/hide deactivated agents\n\n**Common Use Cases:**\n- Load all active agents for the team dashboard\n- Build agent selector dropdowns for manual conversation assignment\n- Monitor real-time agent availability and capacity\n- Track agent performance and productivity metrics\n- Identify offline or busy agents for workload balancing\n- Generate agent reports by project or department\n- Audit agent configurations and permissions\n\n**Sorting Options:**\n- Sort by name (alphabetical order)\n- Sort by created_at (onboarding order)\n- Ascending or descending order\n\n**Performance:**\n- Optimized GORM indexes on tenant+type for fast agent type queries\n- Composite indexes on tenant+status for real-time availability checks\n- Small result sets (typically \u003c 200 agents per tenant) for instant responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List agents with advanced filters and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project UUID - Example: 550e8400-e29b-41d4-a716-446655440000",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ai",
                            "human"
                        ],
                        "type": "string",
                        "example": "human",
                        "description": "Filter by agent type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "online",
                            "offline",
                            "busy"
                        ],
                        "type": "string",
                        "example": "online",
                        "description": "Filter by availability status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by active status - true: only active, false: only inactive",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Results per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "example": "name",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved agents with full details",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid UUID or parameter format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - No access to this tenant's agents",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/agents/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Full-text search across agent names and email addresses. Perfect for quickly finding specific team members in organizations with many agents.\n\n**Search Capabilities:**\n- Searches agent names (primary field)\n- Searches agent email addresses (secondary field)\n- Case-insensitive ILIKE matching\n\n**Match Scoring:**\n- Name matches: 1.5 score (higher priority)\n- Email matches: 1.2 score (lower priority)\n\n**Search Examples:**\n- \"João\" - Find agents named João\n- \"support\" - Find support team members\n- \"@gmail.com\" - Find agents with Gmail addresses\n- \"sales\" - Find sales team agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Search agents by name and email",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "João Silva",
                        "description": "Search query - name or email",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 10,
                        "description": "Maximum results (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found agents with match scores",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Empty search query",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/messages/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of messages with comprehensive filtering across contact, session, channel, direction, content type, and delivery status. Ideal for building message history views, conversation analytics, and customer interaction tracking.\n\n**Filtering Capabilities:**\n- Filter by contact to view all messages for a specific customer\n- Filter by session to see complete conversation threads\n- Filter by channel to analyze messages from specific communication channels (WhatsApp, Email, etc)\n- Filter by project to segment messages by business unit or department\n- Filter by channel_type (1=WhatsApp, 2=Email, 3=SMS, etc) for channel-specific analytics\n- Filter by from_me (true=outbound agent messages, false=inbound customer messages)\n- Filter by content_type (text, image, video, audio, document, location, contact, sticker) for media analysis\n- Filter by status (pending, sent, delivered, read, failed) for delivery tracking\n- Filter by agent_id to track individual agent performance\n- Filter by timestamp range to analyze time-based patterns\n- Filter by has_media flag to find messages with attachments\n\n**Use Cases:**\n- Build conversation history UIs with infinite scroll pagination\n- Analyze customer response times and patterns\n- Track message delivery rates across channels\n- Monitor agent productivity and response quality\n- Generate conversation transcripts for compliance\n- Identify media-rich conversations for quality assurance\n\n**Sorting Options:**\n- Sort by timestamp (default), created_at for processing order\n- Ascending or descending order\n\n**Performance:**\n- Optimized with composite GORM indexes on tenant+session, tenant+contact, tenant+channel\n- GIN index on JSONB metadata field for custom attribute searches\n- Maximum 100 messages per page for optimal response times\n- Efficiently handles millions of messages per tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "List messages with advanced filters and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact UUID - Example: 550e8400-e29b-41d4-a716-446655440000",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session UUID to get full conversation - Example: 660e8400-e29b-41d4-a716-446655440001",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by channel UUID (specific WhatsApp number, email account, etc)",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by project UUID to segment by business unit",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Filter by channel type - 1:WhatsApp, 2:Email, 3:SMS, 4:Web Chat",
                        "name": "channel_type_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Filter by direction - true: agent sent, false: customer sent",
                        "name": "from_me",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "text",
                            "image",
                            "video",
                            "audio",
                            "document",
                            "location",
                            "contact",
                            "sticker"
                        ],
                        "type": "string",
                        "example": "text",
                        "description": "Filter by content type",
                        "name": "content_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "sent",
                            "delivered",
                            "read",
                            "failed"
                        ],
                        "type": "string",
                        "example": "delivered",
                        "description": "Filter by delivery status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by agent UUID for performance tracking",
                        "name": "agent_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2024-01-01T00:00:00Z",
                        "description": "Messages sent after this timestamp - Format: 2006-01-02T15:04:05Z",
                        "name": "timestamp_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2024-12-31T23:59:59Z",
                        "description": "Messages sent before this timestamp",
                        "name": "timestamp_before",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter messages with media attachments - true: only with media",
                        "name": "has_media",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 50,
                        "description": "Messages per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "timestamp",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "timestamp",
                        "example": "timestamp",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "desc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved messages with pagination and filter metadata",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid UUID format, invalid enum values, or limit exceeds 100",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - User lacks permission to access this tenant's messages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database errors or query execution failures",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/messages/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Perform intelligent full-text search across message text content using PostgreSQL ILIKE pattern matching. Perfect for finding specific conversations, keywords, customer questions, or agent responses within your entire message history.\n\n**Search Capabilities:**\n- Searches through message text content (case-insensitive)\n- Supports partial word matches (e.g., \"refund\" matches \"refunds\", \"refunded\")\n- Works across all message types (customer and agent messages)\n- Searches only text content (media URLs are not searched)\n\n**Match Scoring \u0026 Relevance:**\n- All matches receive a score of 1.0 (simple ILIKE search, no complex scoring)\n- Results ordered by timestamp (newest first) for relevance\n- Match field always returns \"text\" since only text content is searched\n\n**Common Use Cases:**\n- Find all conversations mentioning \"refund\" or \"cancellation\"\n- Search for product names across customer inquiries\n- Locate conversations with specific error codes or reference numbers\n- Find messages containing customer phone numbers or emails\n- Search for competitor mentions in customer conversations\n- Identify conversations with specific keywords for quality assurance\n- Compliance searches for regulated terms or phrases\n\n**Search Examples:**\n- \"order #12345\" - Find messages mentioning specific order numbers\n- \"password reset\" - Find password-related support conversations\n- \"urgent\" or \"emergency\" - Identify high-priority conversations\n- \"@email.com\" - Find messages containing email addresses\n- \"bug\" or \"error\" - Locate technical issue reports\n\n**Performance:**\n- Optimized GORM indexes on tenant_id for fast tenant isolation\n- ILIKE operator uses PostgreSQL's text search capabilities\n- Maximum 100 results to ensure sub-second response times\n- Handles searches across millions of messages efficiently",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Full-text search across message content",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "refund request",
                        "description": "Search query - minimum 1 character, case-insensitive, supports partial matches - Examples: 'refund', 'order #12345', 'password reset', 'urgent'",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Maximum number of results (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found matching messages with text excerpts and context",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Missing or empty search query, or limit exceeds 100",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - User lacks permission to search this tenant's messages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database connection errors or search execution failures",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/notes/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all notes with comprehensive filtering capabilities. Notes are annotations, comments, and action items added by agents, automation, or the system during customer interactions. Essential for maintaining conversation context, tracking follow-ups, and audit trails.\n\n**Filtering Capabilities:**\n- Filter by contact_id to view all notes for a specific customer\n- Filter by session_id to see notes from a particular conversation\n- Filter by author_id to track notes from specific agents or automation rules\n- Filter by author_type (agent, system, automation) to distinguish note sources\n- Filter by note_type (comment, action, follow-up, escalation, resolution) to organize by purpose\n- Filter by priority (low, medium, high, urgent) for task management\n- Filter by visible_to_client flag to separate internal vs customer-facing notes\n- Filter by pinned flag to identify important or starred notes\n\n**Common Use Cases:**\n- Build contact history timelines with all interactions and annotations\n- Generate session summaries with agent notes and context\n- Track agent activity and note-taking patterns\n- Manage follow-up tasks and action items\n- Identify escalated issues requiring attention\n- Create customer-facing summaries (visible_to_client=true)\n- Audit trail for compliance and quality assurance\n- Filter high-priority notes for urgent follow-ups\n\n**Sorting Options:**\n- Sort by created_at (chronological order)\n- Sort by priority (task prioritization)\n- Ascending or descending order\n\n**Performance:**\n- Optimized GORM indexes on tenant+contact for fast contact note queries\n- Composite indexes on tenant+session for session note retrieval\n- Indexes on tenant+author for agent activity tracking\n- Efficiently handles large note volumes per contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "List notes with advanced filters and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact UUID - Example: 550e8400-e29b-41d4-a716-446655440000",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session UUID - Example: 660e8400-e29b-41d4-a716-446655440001",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by author (agent/automation) UUID",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "agent",
                            "system",
                            "automation"
                        ],
                        "type": "string",
                        "example": "agent",
                        "description": "Filter by author type",
                        "name": "author_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "comment",
                            "action",
                            "follow-up",
                            "escalation",
                            "resolution"
                        ],
                        "type": "string",
                        "example": "follow-up",
                        "description": "Filter by note purpose",
                        "name": "note_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "urgent"
                        ],
                        "type": "string",
                        "example": "high",
                        "description": "Filter by priority level",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Filter by client visibility - true: customer-facing notes only",
                        "name": "visible_to_client",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by pinned status - true: important/starred notes only",
                        "name": "pinned",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Results per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "priority"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "example": "created_at",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "desc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved notes with full details",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListNotesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid UUID or parameter format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - No access to this tenant's notes",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/notes/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Full-text search across note content and author names. Perfect for finding specific annotations, comments, or action items across all customer interactions and conversations.\n\n**Search Capabilities:**\n- Searches note content/body (primary field)\n- Searches author names (secondary field)\n- Case-insensitive ILIKE matching\n\n**Match Scoring:**\n- Content matches: 1.5 score (higher priority)\n- Author name matches: 1.2 score (lower priority)\n\n**Search Examples:**\n- \"follow-up required\" - Find notes about pending follow-ups\n- \"escalated to manager\" - Locate escalation notes\n- \"pricing question\" - Find pricing-related annotations\n- \"technical issue\" - Search for technical problem notes\n- \"João\" - Find notes written by agent João\n- \"urgent\" - Locate urgent action items\n\n**Performance:**\n- Optimized GORM indexes on tenant_id for fast tenant isolation\n- ILIKE operator uses PostgreSQL's text search capabilities\n- Maximum 100 results to ensure sub-second response times",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Search notes by content and author",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "follow-up required",
                        "description": "Search query - content or author name",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 10,
                        "description": "Maximum results (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found notes with match scores",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchNotesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Empty search query",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/pipelines/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all pipelines with filtering by project, active status, and color. Pipelines organize contacts into workflow stages with customizable statuses. Essential for sales processes, support tickets, and multi-stage customer journeys.\n\n**Filtering Capabilities:**\n- Filter by project_id to get pipelines for a specific business unit\n- Filter by active status to show/hide archived pipelines\n- Filter by color for UI organization and visual pipeline management\n\n**Common Use Cases:**\n- Load all active pipelines for a project's dashboard\n- Build pipeline selector dropdowns for contact assignment\n- Audit pipeline configuration across projects\n- Identify inactive pipelines for cleanup\n- Generate pipeline reports by color-coded categories\n\n**Performance:**\n- Optimized GORM indexes on tenant+active for fast active pipeline queries\n- Small result sets (typically \u003c 50 pipelines per tenant) for instant responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "List pipelines with advanced filters",
                "parameters": [
                    {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000",
                        "description": "Filter by project UUID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by active status - true: only active, false: only inactive",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "#3B82F6",
                        "description": "Filter by hex color code - Example: #FF5733, #3B82F6",
                        "name": "color",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Results per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "position",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "example": "position",
                        "description": "Sort field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved pipelines with full configuration details",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListPipelinesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid UUID or parameter format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - No access to this tenant's pipelines",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/pipelines/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Full-text search across pipeline names and descriptions. Perfect for finding specific pipelines in large organizations with many workflow configurations.\n\n**Search Capabilities:**\n- Searches pipeline names (primary field)\n- Searches pipeline descriptions (secondary field)\n- Case-insensitive ILIKE matching\n\n**Match Scoring:**\n- Name matches: 1.5 score (higher priority)\n- Description matches: 1.2 score (lower priority)\n\n**Search Examples:**\n- \"sales\" - Find all sales-related pipelines\n- \"support\" - Find customer support workflows\n- \"onboarding\" - Locate onboarding process pipelines",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Search pipelines by name and description",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "sales pipeline",
                        "description": "Search query - name or description",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 10,
                        "description": "Maximum results (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found pipelines with match scores",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchPipelinesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Empty search query",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/projects/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all projects with filtering by customer and active status. Projects serve as organizational containers that group channels, pipelines, and contacts into business units or departments. Essential for multi-brand organizations and enterprise segmentation.\n\n**Filtering Capabilities:**\n- Filter by customer_id to view all projects for a specific customer account\n- Filter by active status to show/hide archived projects\n\n**Common Use Cases:**\n- Load all active projects for the main dashboard\n- Build project selector dropdowns for channel/pipeline assignment\n- View complete project portfolio for a specific customer\n- Audit project configurations across the organization\n- Identify inactive projects for cleanup and archival\n- Generate project reports and analytics by customer\n\n**Sorting Options:**\n- Sort by name (alphabetical organization)\n- Sort by created_at (chronological order)\n- Ascending or descending order\n\n**Performance:**\n- Optimized GORM indexes on tenant+customer for fast customer project queries\n- Composite indexes on tenant+active for quick active project retrieval\n- Small result sets (typically \u003c 100 projects per tenant) for instant responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects with advanced filters and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by customer UUID - Example: 550e8400-e29b-41d4-a716-446655440000",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by active status - true: only active, false: only inactive",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Results per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "example": "name",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved projects with full details",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListProjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid UUID or parameter format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - No access to this tenant's projects",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/projects/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Full-text search across project names and descriptions. Perfect for finding specific business units or departments in organizations with many projects.\n\n**Search Capabilities:**\n- Searches project names (primary field)\n- Searches project descriptions (secondary field)\n- Case-insensitive ILIKE matching\n\n**Match Scoring:**\n- Name matches: 1.5 score (higher priority)\n- Description matches: 1.2 score (lower priority)\n\n**Search Examples:**\n- \"sales\" - Find all sales-related projects\n- \"support\" - Find customer support departments\n- \"Q1 2024\" - Locate quarterly projects\n- \"EMEA\" - Find regional projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Search projects by name and description",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "sales project",
                        "description": "Search query - name or description",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 10,
                        "description": "Maximum results (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found projects with match scores",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchProjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Empty search query",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/sessions/advanced": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of sessions with advanced filtering capabilities including contact, pipeline, status, sentiment, and resolution flags. Supports sorting and pagination for efficient data retrieval. Perfect for building session dashboards and reports.\n\n**Filtering Options:**\n- Filter by contact to see all sessions for a specific customer\n- Filter by pipeline to analyze sessions in a specific workflow\n- Filter by status (active/ended) to focus on ongoing or completed sessions\n- Filter by sentiment (positive/negative/neutral) for customer satisfaction analysis\n- Filter by resolved/escalated/converted flags for outcome tracking\n- Filter by date range to analyze sessions within specific time periods\n- Filter by message count range to find short or long conversations\n\n**Sorting Options:**\n- Sort by started_at, ended_at, message_count, or duration\n- Ascending or descending order\n\n**Performance:**\n- Optimized with composite GORM indexes on tenant+status, tenant+contact, tenant+pipeline\n- GIN indexes on JSONB fields (agent_ids, topics, outcome_tags) for fast array searches\n- Pagination prevents large result sets\n- Maximum 100 results per page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "List sessions with advanced filters and pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact UUID - Example: 550e8400-e29b-41d4-a716-446655440000",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by pipeline UUID - Example: 660e8400-e29b-41d4-a716-446655440001",
                        "name": "pipeline_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "ended"
                        ],
                        "type": "string",
                        "example": "active",
                        "description": "Filter by session status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "positive",
                            "negative",
                            "neutral"
                        ],
                        "type": "string",
                        "example": "positive",
                        "description": "Filter by detected sentiment",
                        "name": "sentiment",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by resolved flag - true: only resolved sessions, false: only unresolved",
                        "name": "resolved",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": false,
                        "description": "Filter by escalated flag - true: only escalated sessions",
                        "name": "escalated",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by converted flag - true: sessions that led to conversions",
                        "name": "converted",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2024-01-01T00:00:00Z",
                        "description": "Filter sessions started after this timestamp - Format: 2006-01-02T15:04:05Z",
                        "name": "started_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2024-12-31T23:59:59Z",
                        "description": "Filter sessions started before this timestamp",
                        "name": "started_before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Minimum number of messages in session - Example: 5",
                        "name": "min_messages",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 100,
                        "description": "Maximum number of messages in session - Example: 100",
                        "name": "max_messages",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Number of results per page (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "started_at",
                            "ended_at",
                            "message_count",
                            "duration_seconds",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "started_at",
                        "example": "started_at",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "desc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved sessions with pagination metadata",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListSessionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters (e.g., invalid UUID format, invalid page number, limit exceeds maximum)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have permission to access this tenant's sessions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database connection issues or unexpected errors",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/crm/sessions/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Perform intelligent full-text search across session summaries, topics, key entities, next steps, and outcome tags. Uses PostgreSQL ILIKE for case-insensitive pattern matching with relevance scoring.\n\n**Search Capabilities:**\n- Searches across session summary text (AI-generated conversation summaries)\n- Searches through detected topics (array of conversation topics)\n- Searches through outcome tags (categorization tags added at session end)\n- Searches through key entities (people, products, companies mentioned)\n- Searches through next steps (action items identified in conversation)\n\n**Match Scoring:**\n- Summary matches: 2.0 score (highest priority - main content)\n- Topics matches: 1.5 score (high priority - categorization)\n- Outcome tags matches: 1.3 score (medium priority - resolution info)\n- Key entities/next steps matches: 1.0 score (standard priority)\n\n**Search Examples:**\n- Search for \"refund\" to find all sessions where refunds were discussed\n- Search for \"escalated\" to find problematic sessions\n- Search for \"product-demo\" to find sessions with demo requests\n- Search for customer/company names mentioned in conversations\n\n**Performance:**\n- Optimized with GIN indexes on JSONB fields (topics, outcome_tags, key_entities)\n- Results ordered by match score (highest relevance first)\n- Maximum 100 results to ensure fast response times",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Full-text search across sessions",
                "parameters": [
                    {
                        "minLength": 1,
                        "type": "string",
                        "example": "refund request",
                        "description": "Search query - minimum 1 character, case-insensitive - Example: 'refund request' or 'product-demo' or 'escalated'",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Maximum number of results to return (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found matching sessions with relevance scores and matched fields",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SearchSessionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Missing or invalid search query, limit exceeds maximum",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have permission to search this tenant's sessions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database connection issues or search execution errors",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/domain-events": {
            "get": {
                "description": "Lista todos os eventos de domínio disparados em um projeto",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain-events"
                ],
                "summary": "List domain events by project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/domain-events/by-type": {
            "get": {
                "description": "Lista eventos de domínio filtrados por tipo",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain-events"
                ],
                "summary": "List domain events by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event Type (e.g., contact.created, session.started)",
                        "name": "event_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/messages": {
            "get": {
                "description": "List messages with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "List messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by session ID (UUID)",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by contact ID (UUID)",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by direction (inbound, outbound)",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by message type",
                        "name": "message_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Create message",
                "parameters": [
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/messages/confirm-delivery": {
            "post": {
                "description": "Confirm delivery, reading or failure of a sent message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Confirm message delivery",
                "parameters": [
                    {
                        "description": "Delivery confirmation data",
                        "name": "confirmation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.ConfirmMessageDeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message status updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/messages/send": {
            "post": {
                "description": "Send a message to a contact via specific channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send message",
                "parameters": [
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.SendMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/messages/{id}": {
            "get": {
                "description": "Get details of a specific message",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get message by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid message ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message update data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a message (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Delete message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Message deleted successfully"
                    },
                    "400": {
                        "description": "Invalid message ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lista todos os pipelines de um projeto (apenas do usuário autenticado)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "List pipelines",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pipelines",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Project not owned by user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Cria um novo pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Create pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "project_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Pipeline data",
                        "name": "pipeline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreatePipelineRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Pipeline created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines/{id}": {
            "get": {
                "description": "Obtém detalhes de um pipeline específico com seus status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get pipeline by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pipeline details with statuses",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid pipeline ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines/{id}/statuses": {
            "post": {
                "description": "Cria um novo status em um pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Create status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Status created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pipeline not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines/{pipeline_id}/contacts/{contact_id}/status": {
            "get": {
                "description": "Obtém o status atual de um contato em um pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Get contact status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID (UUID)",
                        "name": "pipeline_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Contact ID (UUID)",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Status not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Altera o status de um contato em um pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pipelines"
                ],
                "summary": "Change contact status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ID (UUID)",
                        "name": "pipeline_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Contact ID (UUID)",
                        "name": "contact_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status change data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.ChangeContactStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pipeline or contact not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/projects": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lista todos os projetos do usuário autenticado",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by tenant ID",
                        "name": "tenant_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Cria um novo projeto",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create project",
                "parameters": [
                    {
                        "description": "Project data",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{id}": {
            "get": {
                "description": "Obtém detalhes de um projeto específico",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Atualiza um projeto existente",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update data",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove um projeto (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project deleted successfully"
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/queues": {
            "get": {
                "description": "Lista todas as filas do RabbitMQ com número de mensagens e consumers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queues"
                ],
                "summary": "List RabbitMQ queues",
                "responses": {
                    "200": {
                        "description": "Queue statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lista todas as sessões. Quando usado no endpoint global /sessions, requer contact_id ou channel_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "List sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by contact ID (UUID) - required for global endpoint",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by channel ID (UUID) - required for global endpoint",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (active, ended)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/stats": {
            "get": {
                "description": "Obtém estatísticas das sessões por tenant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenant_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing tenant ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}": {
            "get": {
                "description": "Obtém detalhes de uma sessão específica",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/close": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Encerra uma sessão manualmente. Apenas agentes podem encerrar sessões.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Close session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Close session request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CloseSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session closed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{session_id}/domain-events": {
            "get": {
                "description": "Lista todos os eventos de domínio disparados para uma sessão",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain-events"
                ],
                "summary": "List domain events by session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{session_id}/messages": {
            "get": {
                "description": "Get all messages from a specific session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get messages by session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/test/waha-connection": {
            "post": {
                "description": "Testa a conexão com a API WAHA usando token e base URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Test WAHA connection",
                "parameters": [
                    {
                        "description": "WAHA connection data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.TestWAHARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/test/waha-qr": {
            "post": {
                "description": "Simula recebimento de um QR code da WAHA para teste",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Test WAHA QR code",
                "parameters": [
                    {
                        "description": "QR code test data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.TestQRCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QR code test result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/trackings": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cria um novo registro de tracking para rastrear origem de contato (anúncios, campanhas, etc)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Cria um novo tracking de conversão",
                "parameters": [
                    {
                        "description": "Dados do tracking",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateTrackingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.TrackingDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/api/v1/trackings/decode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Extrai código invisível ternário de mensagem para identificar tracking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Decodifica mensagem WhatsApp para extrair tracking ID",
                "parameters": [
                    {
                        "description": "Mensagem para decode",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.DecodeTrackingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.DecodeTrackingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/api/v1/trackings/encode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Insere código invisível ternário em mensagem para rastreamento",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Codifica tracking ID em mensagem WhatsApp",
                "parameters": [
                    {
                        "description": "Dados para encode",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.EncodeTrackingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.EncodeTrackingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/api/v1/trackings/enums": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna todos os valores válidos de enums para construir trackings (plataformas, mediums, táticas, formatos, etc)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Lista todos os enums disponíveis para tracking",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.TrackingEnumsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/trackings/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna um tracking específico por ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracking"
                ],
                "summary": "Busca tracking por ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do tracking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_tracking.TrackingDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/api/v1/webhook-subscriptions": {
            "get": {
                "description": "Lista todas as inscrições de webhooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "List webhook subscriptions",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of webhooks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Cria uma nova inscrição de webhook para receber eventos do WAHA",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Create webhook subscription",
                "parameters": [
                    {
                        "description": "Webhook subscription data",
                        "name": "webhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.CreateWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Webhook created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/webhook-subscriptions/available-events": {
            "get": {
                "description": "Lista todos os eventos WAHA disponíveis para inscrição",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get available WAHA events",
                "responses": {
                    "200": {
                        "description": "Available events",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/webhook-subscriptions/{id}": {
            "get": {
                "description": "Obtém detalhes de uma inscrição de webhook",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get webhook subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Webhook not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Atualiza uma inscrição de webhook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Update webhook subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Webhook update data",
                        "name": "webhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.UpdateWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Webhook not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove uma inscrição de webhook",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Delete webhook subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Webhook deleted successfully"
                    },
                    "404": {
                        "description": "Webhook not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/info": {
            "get": {
                "description": "Retorna informações sobre o endpoint de webhook (padrão indústria)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get webhook info",
                "responses": {
                    "200": {
                        "description": "Webhook info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/{webhook_id}": {
            "post": {
                "description": "Recebe eventos de webhook do WAHA usando ID único do webhook (padrão indústria)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Receive WAHA webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID único",
                        "name": "webhook_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event queued",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Webhook not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/ws/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establishes WebSocket connection for bi-directional real-time messaging",
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket connection for real-time messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token (alternative to Bearer header)",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols - WebSocket connection established"
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - origin not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ws/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns current WebSocket connection statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the API is running (basic liveness check)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/database": {
            "get": {
                "description": "Check database connectivity and connection pool status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Database health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    }
                }
            }
        },
        "/health/migrations": {
            "get": {
                "description": "Check database migration status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Database migrations health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    }
                }
            }
        },
        "/health/rabbitmq": {
            "get": {
                "description": "Check RabbitMQ connectivity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "RabbitMQ health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    }
                }
            }
        },
        "/health/redis": {
            "get": {
                "description": "Check Redis connectivity and status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Redis health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    }
                }
            }
        },
        "/health/temporal": {
            "get": {
                "description": "Check Temporal workflow engine connectivity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Temporal health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                        }
                    }
                }
            }
        },
        "/live": {
            "get": {
                "description": "Check if the API is alive (always returns 200 if service is running)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Check if the API is ready to serve requests (includes all dependency checks)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infrastructure_http_handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/test/cleanup": {
            "post": {
                "description": "Remove todos os dados de teste criados",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Cleanup test environment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/test/send-waha-message": {
            "post": {
                "description": "Envia mensagem WAHA automaticamente para o webhook interno",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Send WAHA message automatically",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message type: fb_ads, text, image (default: fb_ads)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/test/setup": {
            "post": {
                "description": "Limpa e cria project, pipeline, channel types e webhook para testes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Setup test environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL do webhook externo (opcional)",
                        "name": "webhook_url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base URL da API (opcional, default: http://localhost:8080)",
                        "name": "api_base_url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/test/waha-message": {
            "post": {
                "description": "Envia mensagem WAHA de teste com dados de tracking do Facebook/Instagram",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Test WAHA message with tracking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message type: fb_ads, text, image (default: fb_ads)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "type": "string",
                    "example": "Validation failed"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid email format"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_health.CheckResult": {
            "type": "object",
            "properties": {
                "duration_ms": {
                    "type": "integer",
                    "example": 15
                },
                "message": {
                    "type": "string",
                    "example": "database is operational"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.Status"
                        }
                    ],
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_health.Status": {
            "type": "string",
            "enum": [
                "healthy",
                "degraded",
                "unhealthy"
            ],
            "x-enum-varnames": [
                "StatusHealthy",
                "StatusDegraded",
                "StatusUnhealthy"
            ]
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.ActionParameterDTO": {
            "type": "object",
            "properties": {
                "default": {},
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.ActionResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "example": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.ActionParameterDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.AutomationDiscoveryResponse": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.ActionResponse"
                    }
                },
                "logic_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.LogicOperatorResponse"
                    }
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.ConditionOperatorResponse"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse"
                    }
                },
                "types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.AutomationTypeResponse"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.AutomationTypeResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "examples": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "icon": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.ConditionOperatorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "example": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.LogicOperatorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerParameter": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "example": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_system": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_http_dto.TriggerParameter"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.AgentDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.AgentSearchResultDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "match_field": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.AgentDTO"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListMessageDTO": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "from_me": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListMessagesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ListMessageDTO"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListNotesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.NoteDTO"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListPipelinesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.PipelineDTO"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListProjectsResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ProjectDTO"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ListSessionsResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SessionDTO"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.MessageSearchResultDTO": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "from_me": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.NoteDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "author_name": {
                    "type": "string"
                },
                "author_type": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "note_type": {
                    "type": "string"
                },
                "pinned": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "visible_to_client": {
                    "type": "boolean"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.NoteSearchResultDTO": {
            "type": "object",
            "properties": {
                "author_name": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "match_field": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "note_type": {
                    "type": "string"
                },
                "pinned": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.PipelineDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "project_id": {
                    "type": "string"
                },
                "session_timeout_minutes": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.PipelineSearchResultDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "match_field": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ProjectDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "billing_account_id": {
                    "type": "string"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "session_timeout_minutes": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.ProjectSearchResultDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "match_field": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.AgentSearchResultDTO"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchMessagesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.MessageSearchResultDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchNotesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.NoteSearchResultDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchPipelinesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.PipelineSearchResultDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchProjectsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.ProjectSearchResultDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SearchSessionsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_application_queries.SessionSearchResultDTO"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SessionDTO": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "converted": {
                    "type": "boolean"
                },
                "duration_seconds": {
                    "type": "integer"
                },
                "ended_at": {
                    "type": "string"
                },
                "escalated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "messages_from_agent": {
                    "type": "integer"
                },
                "messages_from_contact": {
                    "type": "integer"
                },
                "outcome_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pipeline_id": {
                    "type": "string"
                },
                "resolved": {
                    "type": "boolean"
                },
                "sentiment": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_queries.SessionSearchResultDTO": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "match_field": {
                    "type": "string"
                },
                "match_score": {
                    "type": "number"
                },
                "message_count": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_tracking.DecodeTrackingRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_tracking.DecodeTrackingResponse": {
            "type": "object",
            "properties": {
                "analysis": {
                    "type": "object",
                    "additionalProperties": true
                },
                "clean_message": {
                    "type": "string"
                },
                "confidence": {
                    "type": "string"
                },
                "decoded_decimal": {
                    "type": "integer"
                },
                "decoded_ternary": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "original_message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_tracking.EncodeTrackingRequest": {
            "type": "object",
            "required": [
                "message",
                "tracking_id"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "tracking_id": {
                    "type": "integer"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_tracking.EncodeTrackingResponse": {
            "type": "object",
            "properties": {
                "debug": {
                    "type": "object",
                    "additionalProperties": true
                },
                "decimal_value": {
                    "type": "integer"
                },
                "invisible_code": {
                    "type": "string"
                },
                "message_with_code": {
                    "type": "string"
                },
                "original_message": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "ternary_encoded": {
                    "type": "string"
                },
                "tracking_id": {
                    "type": "integer"
                },
                "whatsapp_link": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_application_tracking.TrackingDTO": {
            "type": "object",
            "properties": {
                "ad_id": {
                    "type": "string"
                },
                "ad_url": {
                    "type": "string"
                },
                "campaign": {
                    "type": "string"
                },
                "click_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "conversion_data": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "platform": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "utm_campaign": {
                    "type": "string"
                },
                "utm_content": {
                    "type": "string"
                },
                "utm_medium": {
                    "type": "string"
                },
                "utm_source": {
                    "type": "string"
                },
                "utm_term": {
                    "type": "string"
                }
            }
        },
        "github_com_caloi_ventros-crm_internal_domain_pipeline.StatusType": {
            "type": "string",
            "enum": [
                "open",
                "active",
                "closed"
            ],
            "x-enum-varnames": [
                "StatusTypeOpen",
                "StatusTypeActive",
                "StatusTypeClosed"
            ]
        },
        "infrastructure_http_handlers.AddParticipantRequest": {
            "type": "object",
            "required": [
                "participant_id",
                "participant_type"
            ],
            "properties": {
                "participant_id": {
                    "type": "string"
                },
                "participant_type": {
                    "type": "string",
                    "example": "agent"
                }
            }
        },
        "infrastructure_http_handlers.ChangeContactStatusRequest": {
            "type": "object",
            "required": [
                "status_id"
            ],
            "properties": {
                "notes": {
                    "type": "string",
                    "example": "Cliente interessado no produto X"
                },
                "reason": {
                    "type": "string",
                    "example": "Contato respondeu"
                },
                "status_id": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.ChangePipelineStatusRequest": {
            "type": "object",
            "required": [
                "status_id"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                },
                "status_id": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.CloseSessionRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "notes": {
                    "type": "string"
                },
                "reason": {
                    "description": "\"resolved\", \"transferred\", \"escalated\", \"agent_closed\"",
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.ConfigureWebhookRequest": {
            "type": "object",
            "properties": {
                "base_url": {
                    "type": "string",
                    "example": "https://api.ventros.com"
                }
            }
        },
        "infrastructure_http_handlers.ConfirmMessageDeliveryRequest": {
            "type": "object",
            "required": [
                "external_id",
                "status"
            ],
            "properties": {
                "delivered_at": {
                    "type": "string",
                    "example": "2025-10-09T10:30:00Z"
                },
                "external_id": {
                    "type": "string",
                    "example": "wamid.123456"
                },
                "failure_reason": {
                    "type": "string",
                    "example": "Message expired"
                },
                "message_id": {
                    "type": "string"
                },
                "read_at": {
                    "type": "string",
                    "example": "2025-10-09T10:35:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "delivered"
                }
            }
        },
        "infrastructure_http_handlers.CreateAgentRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "tenant_id"
            ],
            "properties": {
                "department": {
                    "type": "string",
                    "example": "vendas"
                },
                "email": {
                    "type": "string",
                    "example": "joao@empresa.com"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "pt",
                        "en"
                    ]
                },
                "max_sessions": {
                    "type": "integer",
                    "example": 5
                },
                "name": {
                    "type": "string",
                    "example": "João Silva"
                },
                "phone": {
                    "type": "string",
                    "example": "+5511999999999"
                },
                "role": {
                    "type": "string",
                    "example": "agent"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "vendas",
                        "suporte"
                    ]
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant_123"
                }
            }
        },
        "infrastructure_http_handlers.CreateChannelRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "allow_groups": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "WhatsApp Principal"
                },
                "session_timeout_minutes": {
                    "type": "integer",
                    "example": 30
                },
                "tracking_enabled": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "example": "waha"
                },
                "waha_config": {
                    "$ref": "#/definitions/infrastructure_http_handlers.CreateWAHAConfigRequest"
                }
            }
        },
        "infrastructure_http_handlers.CreateChatRequest": {
            "type": "object",
            "required": [
                "chat_type"
            ],
            "properties": {
                "chat_type": {
                    "type": "string",
                    "example": "individual"
                },
                "contact_id": {
                    "type": "string"
                },
                "creator_id": {
                    "type": "string"
                },
                "subject": {
                    "type": "string",
                    "example": "Team Discussion"
                }
            }
        },
        "infrastructure_http_handlers.CreateContactRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "custom_fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "company": "Empresa XYZ"
                    }
                },
                "email": {
                    "type": "string",
                    "example": "joao@example.com"
                },
                "external_id": {
                    "type": "string",
                    "example": "ext_123"
                },
                "language": {
                    "type": "string",
                    "example": "pt-BR"
                },
                "name": {
                    "type": "string",
                    "example": "João Silva"
                },
                "phone": {
                    "type": "string",
                    "example": "+5511999999999"
                },
                "source_channel": {
                    "type": "string",
                    "example": "whatsapp"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "lead",
                        "whatsapp"
                    ]
                },
                "timezone": {
                    "type": "string",
                    "example": "America/Sao_Paulo"
                }
            }
        },
        "infrastructure_http_handlers.CreateMessageRequest": {
            "type": "object",
            "required": [
                "channel_type_id",
                "contact_id",
                "content",
                "session_id"
            ],
            "properties": {
                "channel_type_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string",
                    "example": "Olá, como posso ajudar?"
                },
                "direction": {
                    "type": "string",
                    "example": "inbound"
                },
                "external_id": {
                    "type": "string",
                    "example": "msg_123"
                },
                "media_type": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "message_type": {
                    "type": "string",
                    "example": "text"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "reply_to_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.CreatePipelineRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "color": {
                    "type": "string",
                    "example": "#3B82F6"
                },
                "description": {
                    "type": "string",
                    "example": "Pipeline de vendas principal"
                },
                "name": {
                    "type": "string",
                    "example": "Vendas"
                },
                "position": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "infrastructure_http_handlers.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name",
                "tenant_id"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Projeto principal de vendas"
                },
                "name": {
                    "type": "string",
                    "example": "Projeto Vendas"
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant_123"
                }
            }
        },
        "infrastructure_http_handlers.CreateStatusRequest": {
            "type": "object",
            "required": [
                "name",
                "status_type"
            ],
            "properties": {
                "color": {
                    "type": "string",
                    "example": "#10B981"
                },
                "description": {
                    "type": "string",
                    "example": "Lead recém chegado"
                },
                "name": {
                    "type": "string",
                    "example": "Novo Lead"
                },
                "position": {
                    "type": "integer",
                    "example": 0
                },
                "status_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_caloi_ventros-crm_internal_domain_pipeline.StatusType"
                        }
                    ],
                    "example": "open"
                }
            }
        },
        "infrastructure_http_handlers.CreateTrackingRequest": {
            "type": "object",
            "required": [
                "contact_id",
                "platform",
                "project_id",
                "source"
            ],
            "properties": {
                "ad_id": {
                    "type": "string"
                },
                "ad_url": {
                    "type": "string"
                },
                "campaign": {
                    "type": "string"
                },
                "click_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "conversion_data": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "platform": {
                    "description": "instagram, facebook, etc",
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "source": {
                    "description": "meta_ads, google_ads, etc",
                    "type": "string"
                },
                "utm_campaign": {
                    "type": "string"
                },
                "utm_content": {
                    "type": "string"
                },
                "utm_medium": {
                    "type": "string"
                },
                "utm_source": {
                    "type": "string"
                },
                "utm_term": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "joao@empresa.com"
                },
                "name": {
                    "type": "string",
                    "example": "João Silva"
                },
                "password": {
                    "type": "string",
                    "example": "senha123"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "infrastructure_http_handlers.CreateWAHAConfigRequest": {
            "type": "object",
            "required": [
                "base_url"
            ],
            "properties": {
                "api_key": {
                    "type": "string",
                    "example": "your-waha-api-key"
                },
                "base_url": {
                    "type": "string",
                    "example": "http://localhost:3000"
                },
                "session_id": {
                    "type": "string",
                    "example": "default"
                },
                "token": {
                    "type": "string",
                    "example": "your-waha-token"
                },
                "webhook_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/webhooks/waha"
                }
            }
        },
        "infrastructure_http_handlers.CreateWebhookRequest": {
            "type": "object",
            "required": [
                "events",
                "name",
                "url"
            ],
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "message",
                        "ack",
                        "call.received"
                    ]
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "Authorization": "Bearer token123"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "N8N Webhook"
                },
                "retry_count": {
                    "type": "integer",
                    "example": 3
                },
                "secret": {
                    "type": "string",
                    "example": "my-secret-key"
                },
                "timeout_seconds": {
                    "type": "integer",
                    "example": 30
                },
                "url": {
                    "type": "string",
                    "example": "https://n8n.example.com/webhook/waha-events"
                }
            }
        },
        "infrastructure_http_handlers.EnumValue": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Facebook, Instagram, Messenger, Audience Network"
                },
                "label": {
                    "type": "string",
                    "example": "Meta (Facebook/Instagram)"
                },
                "value": {
                    "type": "string",
                    "example": "meta"
                }
            }
        },
        "infrastructure_http_handlers.GenerateAPIKeyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Minha API Key"
                }
            }
        },
        "infrastructure_http_handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_caloi_ventros-crm_infrastructure_health.CheckResult"
                    }
                },
                "service": {
                    "type": "string",
                    "example": "ventros-crm"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "version": {
                    "type": "string",
                    "example": "0.1.0"
                }
            }
        },
        "infrastructure_http_handlers.ImportWAHAHistoryRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 100
                },
                "strategy": {
                    "type": "string",
                    "example": "recent"
                }
            }
        },
        "infrastructure_http_handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "joao@empresa.com"
                },
                "password": {
                    "type": "string",
                    "example": "senha123"
                }
            }
        },
        "infrastructure_http_handlers.PlatformCompatibilityInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "valid_mediums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "infrastructure_http_handlers.SendMessageRequest": {
            "type": "object",
            "required": [
                "channel_id",
                "contact_id",
                "content_type"
            ],
            "properties": {
                "channel_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "contact_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "content_type": {
                    "type": "string",
                    "example": "text"
                },
                "media_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "reply_to_id": {
                    "type": "string"
                },
                "text": {
                    "type": "string",
                    "example": "Hello, how can I help you?"
                }
            }
        },
        "infrastructure_http_handlers.SendMessageResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string",
                    "example": "wamid.123456"
                },
                "message_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "sent_at": {
                    "type": "string",
                    "example": "2025-10-09T10:30:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "sent"
                }
            }
        },
        "infrastructure_http_handlers.TestQRCodeRequest": {
            "type": "object",
            "required": [
                "channel_name",
                "session_id"
            ],
            "properties": {
                "channel_name": {
                    "type": "string",
                    "example": "WhatsApp Teste"
                },
                "session_id": {
                    "type": "string",
                    "example": "default"
                }
            }
        },
        "infrastructure_http_handlers.TestWAHARequest": {
            "type": "object",
            "required": [
                "base_url"
            ],
            "properties": {
                "base_url": {
                    "type": "string",
                    "example": "http://localhost:3000"
                },
                "token": {
                    "type": "string",
                    "example": "your-waha-token"
                }
            }
        },
        "infrastructure_http_handlers.TrackingEnumsResponse": {
            "type": "object",
            "properties": {
                "creative_formats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "google_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "marketing_tactics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "meta_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "mkt_direto_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "offline_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                },
                "platform_compatibility": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/infrastructure_http_handlers.PlatformCompatibilityInfo"
                    }
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infrastructure_http_handlers.EnumValue"
                    }
                }
            }
        },
        "infrastructure_http_handlers.UpdateAgentRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "department": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_sessions": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "infrastructure_http_handlers.UpdateContactRequest": {
            "type": "object",
            "properties": {
                "custom_fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "source_channel": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.UpdateMessageRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "delivered_at": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "read_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.UpdateProjectRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "infrastructure_http_handlers.UpdateSubjectRequest": {
            "type": "object",
            "required": [
                "subject"
            ],
            "properties": {
                "subject": {
                    "type": "string",
                    "example": "New Team Discussion"
                }
            }
        },
        "infrastructure_http_handlers.UpdateWebhookRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "secret": {
                    "type": "string"
                },
                "timeout_seconds": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Key authentication for service-to-service communication",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Bearer token authentication. Format: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Ventros CRM API",
	Description:      "API para gerenciamento de CRM com eventos e workflows",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
